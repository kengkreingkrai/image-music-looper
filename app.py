import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import os
import threading
from PIL import Image, ImageTk
import subprocess

class ImageMusicLooperUI:
    def __init__(self, root):
        self.root = root
        self.root.title("üéµ Image Music Looper - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏ö‡∏ö‡∏•‡∏π‡∏õ")
        self.root.geometry("800x900")
        self.root.configure(bg="#f0f0f0")
        
        # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        self.image_path = tk.StringVar()
        self.audio_path = tk.StringVar()
        self.output_path = tk.StringVar(value=os.getcwd())
        self.duration_hours = tk.DoubleVar(value=4.0)
        self.crossfade_duration = tk.IntVar(value=3000)
        self.auto_crossfade = tk.BooleanVar(value=True)
        self.aspect_ratio = tk.StringVar(value="16:9")
        self.keep_original = tk.BooleanVar(value=False)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á UI
        self.create_ui()
        
        # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö preview
        self.image_preview = None
        self.cropped_preview = None
        
    def create_ui(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á UI ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        # ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏´‡∏•‡∏±‡∏Å
        title_frame = tk.Frame(self.root, bg="#2c3e50", height=80)
        title_frame.pack(fill="x", padx=10, pady=10)
        title_frame.pack_propagate(False)
        
        title_label = tk.Label(title_frame, 
                              text="üéµ Image Music Looper",
                              font=("Arial", 20, "bold"),
                              fg="white", bg="#2c3e50")
        title_label.pack(expand=True)
        
        subtitle_label = tk.Label(title_frame,
                                 text="‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏ö‡∏ö‡∏•‡∏π‡∏õ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡πà‡∏≤‡∏¢",
                                 font=("Arial", 12),
                                 fg="#ecf0f1", bg="#2c3e50")
        subtitle_label.pack()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Notebook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ó‡πá‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ
        notebook = ttk.Notebook(self.root)
        notebook.pack(fill="both", expand=True, padx=10, pady=10)
        
        # ‡πÅ‡∏ó‡πá‡∏ö‡∏ó‡∏µ‡πà 1: ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå
        self.create_file_tab(notebook)
        
        # ‡πÅ‡∏ó‡πá‡∏ö‡∏ó‡∏µ‡πà 2: ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
        self.create_advanced_tab(notebook)
        
        # ‡πÅ‡∏ó‡πá‡∏ö‡∏ó‡∏µ‡πà 3: ‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        self.create_preview_tab(notebook)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
        self.create_action_buttons()
        
    def create_file_tab(self, notebook):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ó‡πá‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå"""
        file_frame = ttk.Frame(notebook)
        notebook.add(file_frame, text="üìÅ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå")
        
        # ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û
        image_section = ttk.LabelFrame(file_frame, text="üñºÔ∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á", padding=15)
        image_section.pack(fill="x", padx=20, pady=10)
        
        ttk.Label(image_section, text="‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û:").pack(anchor="w")
        image_frame = tk.Frame(image_section)
        image_frame.pack(fill="x", pady=5)
        
        ttk.Entry(image_frame, textvariable=self.image_path, width=60).pack(side="left", fill="x", expand=True)
        ttk.Button(image_frame, text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", command=self.select_image).pack(side="right", padx=(5,0))
        
        # ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á
        audio_section = ttk.LabelFrame(file_frame, text="üéµ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á", padding=15)
        audio_section.pack(fill="x", padx=20, pady=10)
        
        ttk.Label(audio_section, text="‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á:").pack(anchor="w")
        audio_frame = tk.Frame(audio_section)
        audio_frame.pack(fill="x", pady=5)
        
        ttk.Entry(audio_frame, textvariable=self.audio_path, width=60).pack(side="left", fill="x", expand=True)
        ttk.Button(audio_frame, text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", command=self.select_audio).pack(side="right", padx=(5,0))
        
        # ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        output_section = ttk.LabelFrame(file_frame, text="üìÅ ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå", padding=15)
        output_section.pack(fill="x", padx=20, pady=10)
        
        ttk.Label(output_section, text="‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å:").pack(anchor="w")
        output_frame = tk.Frame(output_section)
        output_frame.pack(fill="x", pady=5)
        
        ttk.Entry(output_frame, textvariable=self.output_path, width=60).pack(side="left", fill="x", expand=True)
        ttk.Button(output_frame, text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", command=self.select_output).pack(side="right", padx=(5,0))
        
        # ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤
        time_section = ttk.LabelFrame(file_frame, text="‚è∞ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠", padding=15)
        time_section.pack(fill="x", padx=20, pady=10)
        
        time_frame = tk.Frame(time_section)
        time_frame.pack(fill="x")
        
        ttk.Label(time_frame, text="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß (‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á):").pack(side="left")
        ttk.Scale(time_frame, from_=0.5, to=12.0, variable=self.duration_hours, 
                 orient="horizontal", length=200).pack(side="left", padx=10)
        duration_label = ttk.Label(time_frame, text="4.0 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á")
        duration_label.pack(side="left")
        
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô scale
        def update_duration_label(*args):
            duration_label.config(text=f"{self.duration_hours.get():.1f} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á")
        self.duration_hours.trace('w', update_duration_label)
        
    def create_advanced_tab(self, notebook):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ó‡πá‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á"""
        advanced_frame = ttk.Frame(notebook)
        notebook.add(advanced_frame, text="‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á")
        
        # ‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏†‡∏≤‡∏û
        ratio_section = ttk.LabelFrame(advanced_frame, text="üìê ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏†‡∏≤‡∏û", padding=15)
        ratio_section.pack(fill="x", padx=20, pady=10)
        
        ratio_frame = tk.Frame(ratio_section)
        ratio_frame.pack(fill="x")
        
        ttk.Label(ratio_frame, text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô:").pack(side="left")
        ratio_combo = ttk.Combobox(ratio_frame, textvariable=self.aspect_ratio, 
                                  values=["16:9", "4:3", "1:1", "21:9"], state="readonly", width=10)
        ratio_combo.pack(side="left", padx=10)
        ratio_combo.current(0)
        
        # ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Crossfade
        crossfade_section = ttk.LabelFrame(advanced_frame, text="üé≠ ‡∏Å‡∏≤‡∏£‡∏ú‡∏™‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏á (Crossfade)", padding=15)
        crossfade_section.pack(fill="x", padx=20, pady=10)
        
        # ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á Auto ‡πÅ‡∏•‡∏∞ Manual
        crossfade_mode_frame = tk.Frame(crossfade_section)
        crossfade_mode_frame.pack(fill="x", pady=5)
        
        ttk.Radiobutton(crossfade_mode_frame, text="ü§ñ ‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏≤‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥", 
                       variable=self.auto_crossfade, value=True).pack(anchor="w")
        
        manual_frame = tk.Frame(crossfade_section)
        manual_frame.pack(fill="x", pady=5)
        
        ttk.Radiobutton(manual_frame, text="üéõÔ∏è ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ Crossfade ‡πÄ‡∏≠‡∏á:", 
                       variable=self.auto_crossfade, value=False).pack(side="left")
        
        crossfade_spinbox = ttk.Spinbox(manual_frame, from_=500, to=10000, increment=500,
                                       textvariable=self.crossfade_duration, width=10)
        crossfade_spinbox.pack(side="left", padx=10)
        ttk.Label(manual_frame, text="‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ").pack(side="left")
        
        # ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ Crossfade
        info_frame = tk.Frame(crossfade_section)
        info_frame.pack(fill="x", pady=10)
        
        info_text = """üí° ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢:
‚Ä¢ Crossfade ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ú‡∏™‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏∏‡∏î‡∏à‡∏ö‡πÅ‡∏•‡∏∞‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏±‡∏ô
‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞"""
        
        ttk.Label(info_frame, text=info_text, foreground="gray").pack(anchor="w")
        
        # ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∑‡πà‡∏ô‡πÜ
        other_section = ttk.LabelFrame(advanced_frame, text="üîß ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∑‡πà‡∏ô‡πÜ", padding=15)
        other_section.pack(fill="x", padx=20, pady=10)
        
        ttk.Checkbutton(other_section, text="üíæ ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡πÑ‡∏ß‡πâ (‡πÑ‡∏°‡πà‡∏•‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•)", 
                       variable=self.keep_original).pack(anchor="w", pady=5)
        
    def create_preview_tab(self, notebook):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ó‡πá‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á"""
        preview_frame = ttk.Frame(notebook)
        notebook.add(preview_frame, text="üëÅÔ∏è ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á")
        
        # ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
        original_section = ttk.LabelFrame(preview_frame, text="üñºÔ∏è ‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö", padding=10)
        original_section.pack(side="left", fill="both", expand=True, padx=10, pady=10)
        
        self.original_canvas = tk.Canvas(original_section, width=300, height=200, bg="white")
        self.original_canvas.pack(pady=10)
        
        # ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏á crop
        cropped_section = ttk.LabelFrame(preview_frame, text="‚úÇÔ∏è ‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏á Crop", padding=10)
        cropped_section.pack(side="right", fill="both", expand=True, padx=10, pady=10)
        
        self.cropped_canvas = tk.Canvas(cropped_section, width=300, height=200, bg="white")
        self.cropped_canvas.pack(pady=10)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
        preview_btn_frame = tk.Frame(preview_frame)
        preview_btn_frame.pack(fill="x", padx=20, pady=10)
        
        ttk.Button(preview_btn_frame, text="üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á", 
                  command=self.update_preview).pack()
        
    def create_action_buttons(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£"""
        action_frame = tk.Frame(self.root, bg="#f0f0f0")
        action_frame.pack(fill="x", padx=20, pady=20)
        
        # Progress bar
        self.progress_var = tk.DoubleVar()
        self.progress_bar = ttk.Progressbar(action_frame, variable=self.progress_var, 
                                           mode="determinate", length=400)
        self.progress_bar.pack(pady=10)
        
        # Status label
        self.status_label = tk.Label(action_frame, text="‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", 
                                    font=("Arial", 10), fg="green", bg="#f0f0f0")
        self.status_label.pack(pady=5)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ
        button_frame = tk.Frame(action_frame, bg="#f0f0f0")
        button_frame.pack()
        
        ttk.Button(button_frame, text="üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤", 
                  command=self.validate_settings).pack(side="left", padx=5)
        
        self.start_button = ttk.Button(button_frame, text="üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠", 
                                      command=self.start_processing)
        self.start_button.pack(side="left", padx=5)
        
        ttk.Button(button_frame, text="üìÅ ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå", 
                  command=self.open_output_folder).pack(side="left", padx=5)
        
    def select_image(self):
        """‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û"""
        file_path = filedialog.askopenfilename(
            title="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û",
            filetypes=[
                ("‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û", "*.jpg *.jpeg *.png *.bmp"),
                ("JPEG", "*.jpg *.jpeg"),
                ("PNG", "*.png"),
                ("Bitmap", "*.bmp"),
                ("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "*.*")
            ]
        )
        if file_path:
            self.image_path.set(file_path)
            self.update_status(f"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û: {os.path.basename(file_path)}")
            
    def select_audio(self):
        """‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á"""
        file_path = filedialog.askopenfilename(
            title="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á",
            filetypes=[
                ("‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á", "*.mp3 *.wav *.m4a *.flac"),
                ("MP3", "*.mp3"),
                ("WAV", "*.wav"),
                ("M4A", "*.m4a"),
                ("FLAC", "*.flac"),
                ("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "*.*")
            ]
        )
        if file_path:
            self.audio_path.set(file_path)
            self.update_status(f"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á: {os.path.basename(file_path)}")
            
    def select_output(self):
        """‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"""
        folder_path = filedialog.askdirectory(title="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå")
        if folder_path:
            self.output_path.set(folder_path)
            self.update_status(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà: {folder_path}")
            
    def update_preview(self):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏†‡∏≤‡∏û"""
        if not self.image_path.get():
            messagebox.showwarning("‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô")
            return
            
        try:
            # ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
            original_img = Image.open(self.image_path.get())
            original_img.thumbnail((280, 180), Image.Resampling.LANCZOS)
            self.image_preview = ImageTk.PhotoImage(original_img)
            
            self.original_canvas.delete("all")
            self.original_canvas.create_image(150, 100, image=self.image_preview)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏á crop ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
            self.create_crop_preview(original_img)
            
            self.update_status("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
            
        except Exception as e:
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ: {str(e)}")
            
    def create_crop_preview(self, img):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏á crop"""
        ratio = self.aspect_ratio.get()
        width, height = img.size
        
        if ratio == "16:9":
            target_ratio = 16/9
        elif ratio == "4:3":
            target_ratio = 4/3
        elif ratio == "1:1":
            target_ratio = 1/1
        elif ratio == "21:9":
            target_ratio = 21/9
        else:
            target_ratio = 16/9
            
        current_ratio = width / height
        
        if current_ratio > target_ratio:
            # ‡∏†‡∏≤‡∏û‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≤‡∏á
            new_width = int(height * target_ratio)
            left = (width - new_width) // 2
            cropped = img.crop((left, 0, left + new_width, height))
        else:
            # ‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏ï‡∏±‡∏î‡∏ö‡∏ô‡∏•‡πà‡∏≤‡∏á
            new_height = int(width / target_ratio)
            top = (height - new_height) // 2
            cropped = img.crop((0, top, width, top + new_height))
            
        cropped.thumbnail((280, 180), Image.Resampling.LANCZOS)
        self.cropped_preview = ImageTk.PhotoImage(cropped)
        
        self.cropped_canvas.delete("all")
        self.cropped_canvas.create_image(150, 100, image=self.cropped_preview)
        
    def validate_settings(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤"""
        errors = []
        
        if not self.image_path.get():
            errors.append("‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û")
        elif not os.path.exists(self.image_path.get()):
            errors.append("‚ùå ‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏û‡∏ö")
            
        if not self.audio_path.get():
            errors.append("‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á")
        elif not os.path.exists(self.audio_path.get()):
            errors.append("‚ùå ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö")
            
        if not os.path.exists(self.output_path.get()):
            errors.append("‚ùå ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÑ‡∏°‡πà‡∏û‡∏ö")
            
        if self.duration_hours.get() < 0.1:
            errors.append("‚ùå ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0.1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á")
            
        if errors:
            messagebox.showerror("‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", "\n".join(errors))
            return False
        else:
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
            info = f"""‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!

üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤:
üñºÔ∏è ‡∏†‡∏≤‡∏û: {os.path.basename(self.image_path.get())}
üéµ ‡πÄ‡∏™‡∏µ‡∏¢‡∏á: {os.path.basename(self.audio_path.get())}
üìÅ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà: {self.output_path.get()}
‚è∞ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß: {self.duration_hours.get():.1f} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
üìê ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô: {self.aspect_ratio.get()}
üé≠ Crossfade: {'‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥' if self.auto_crossfade.get() else f'{self.crossfade_duration.get()} ms'}
üíæ ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö: {'‡πÉ‡∏ä‡πà' if self.keep_original.get() else '‡πÑ‡∏°‡πà'}

‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÅ‡∏•‡πâ‡∏ß! üöÄ"""
            
            messagebox.showinfo("‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤", info)
            return True
            
    def start_processing(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•"""
        if not self.validate_settings():
            return
            
        # ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        if not messagebox.askyesno("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô", 
                                  f"‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß {self.duration_hours.get():.1f} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á?\n"
                                  "‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô"):
            return
            
        # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏∏‡πà‡∏°
        self.start_button.config(state="disabled")
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏° thread ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
        processing_thread = threading.Thread(target=self.process_video)
        processing_thread.daemon = True
        processing_thread.start()
        
    def process_video(self):
        """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠"""
        try:
            self.update_status("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...")
            self.progress_var.set(10)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á looper ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á
            looper = CustomImageMusicLooper(
                image_file=self.image_path.get(),
                audio_file=self.audio_path.get(),
                output_folder=self.output_path.get(),
                duration_hours=self.duration_hours.get(),
                aspect_ratio=self.aspect_ratio.get(),
                crossfade_duration=self.crossfade_duration.get(),
                auto_crossfade=self.auto_crossfade.get(),
                keep_original=self.keep_original.get(),
                progress_callback=self.update_progress
            )
            
            # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
            success = looper.process()
            
            if success:
                self.progress_var.set(100)
                self.update_status("‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ")
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", 
                                   f"‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!\n"
                                   f"‡πÑ‡∏ü‡∏•‡πå‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà: {looper.output_video}")
            else:
                self.update_status("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‚ùå")
                messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÑ‡∏î‡πâ")
                
        except Exception as e:
            self.update_status(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)} ‚ùå")
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
            
        finally:
            # ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
            self.start_button.config(state="normal")
            
    def update_progress(self, value, message=""):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï progress bar"""
        self.progress_var.set(value)
        if message:
            self.update_status(message)
            
    def update_status(self, message):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"""
        self.status_label.config(text=message)
        self.root.update_idletasks()
        
    def open_output_folder(self):
        """‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"""
        if os.path.exists(self.output_path.get()):
            if os.name == 'nt':  # Windows
                os.startfile(self.output_path.get())
            elif os.name == 'posix':  # macOS and Linux
                subprocess.run(['open', self.output_path.get()])
        else:
            messagebox.showwarning("‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏û‡∏ö")


class CustomImageMusicLooper:
    """‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ï‡∏≤‡∏° UI"""
    
    def __init__(self, image_file, audio_file, output_folder, duration_hours, 
                 aspect_ratio, crossfade_duration, auto_crossfade, keep_original, 
                 progress_callback=None):
        self.image_file = image_file
        self.audio_file = audio_file
        self.output_folder = output_folder
        self.duration_hours = duration_hours
        self.aspect_ratio = aspect_ratio
        self.crossfade_duration = crossfade_duration
        self.auto_crossfade = auto_crossfade
        self.keep_original = keep_original
        self.progress_callback = progress_callback
        
        # ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        base_name = os.path.splitext(os.path.basename(audio_file))[0]
        self.output_video = os.path.join(output_folder, f"{base_name}_music_loop.mp4")
        
    def process(self):
        """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏´‡∏•‡∏±‡∏Å"""
        try:
            # ‡πÉ‡∏ä‡πâ LullaboyLooper ‡∏à‡∏≤‡∏Å app.py ‡πÅ‡∏ï‡πà‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
            if self.progress_callback:
                self.progress_callback(20, "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á...")
                
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á looper ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
            temp_folder = os.path.join(self.output_folder, "temp")
            os.makedirs(temp_folder, exist_ok=True)
            
            # ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
            import shutil
            base_name = os.path.splitext(os.path.basename(self.audio_file))[0]
            temp_audio = os.path.join(temp_folder, f"{base_name}.mp3")
            temp_image = os.path.join(temp_folder, f"{base_name}.jpg")
            
            shutil.copy2(self.audio_file, temp_audio)
            shutil.copy2(self.image_file, temp_image)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á looper
            target_duration_ms = int(self.duration_hours * 60 * 60 * 1000)
            crossfade_ms = self.crossfade_duration if not self.auto_crossfade else 3000
            
            looper = LullaboyLooper(
                folder_path=temp_folder,
                crossfade_duration=crossfade_ms,
                remove_audio=not self.keep_original
            )
            
            # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç target duration
            looper.target_duration = target_duration_ms
            
            if self.progress_callback:
                self.progress_callback(40, "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏á...")
                
            # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
            looper.process()
            
            if self.progress_callback:
                self.progress_callback(80, "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö‡πÑ‡∏ü‡∏•‡πå...")
                
            # ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            temp_output = os.path.join(temp_folder, f"{base_name}.mp4")
            if os.path.exists(temp_output):
                shutil.move(temp_output, self.output_video)
                
            # ‡∏•‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
            shutil.rmtree(temp_folder, ignore_errors=True)
            
            if self.progress_callback:
                self.progress_callback(100, "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
                
            return True
            
        except Exception as e:
            print(f"Error in CustomImageMusicLooper: {e}")
            return False


def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    root = tk.Tk()
    app = ImageMusicLooperUI(root)
    root.mainloop()


if __name__ == "__main__":
    main()
